#include<iostream>
#include<functional>
using namespace std;
using namespace std::placeholders;

template<typename K, typename V>
struct AVLmap {

	struct Node {

		Node * left;
		Node * right;
		K data;
		V value;
		int height;
		Node(K keyfunc, V valuefunc) {
			value = valuefunc;
			data = keyfunc;
			left = NULL;
			right = NULL;
			height = 1;

		}
	};
	Node * root;
	int cur_size;

	std::function<bool(K, K)> lessthancomparator;
	std::function<bool(K, K)> equaltocomparator;

	AVLmap(bool cmp1(K, K), bool cmp2(K, K)) {
		cur_size = 0;
		root = NULL;
		lessthancomparator = cmp1;
		equaltocomparator = cmp2;
	}

	bool privatecmp1(K key1, K key2) {
		return key1 < key2;
	}
	bool privatecmp2(K key1, K key2) {
		return key1 == key2;
	}
//	std::function<bool(K, K)>  func(){
//		return privatecmp;
//	}
	AVLmap() {
		cur_size = 0;
		root = NULL;
		lessthancomparator = std::bind(privatecmp1, this, _1, _2);
		equaltocomparator = std::bind(privatecmp2, this, _1, _2);
	}

	void insert(K key, V value) {

		root = insertutil(root, key, value);
	}
	Node * getroot() {
		return root;
	}
	int getbalance(Node * node) {
		int left = getNodeHeight(node->left);
		int right = getNodeHeight(node->right);
		return right - left;
	}

	Node * insertutil(Node * node, K key, V value) {
		if (!node)
			return new Node(key, value);
		if (equaltocomparator(node->data, key)) {
			node->value = value;
			return node;
		} else if (lessthancomparator(key, node->data)) {
			node->left = insertutil(node->left, key, value);
		} else {
			node->right = insertutil(node->right, key, value);
		}

		return balanceNode(node);

	}

	Node * balanceNode(Node * node) {
		int balance = getbalance(node);
		node->height = std::max(getNodeHeight(node->left),
				getNodeHeight(node->right)) + 1;
		if (balance < -1) {
			if (getNodeHeight(node->left->left)
					< getNodeHeight(node->left->right))
				node->left = leftrotate(node->left);

			return rightrotate(node);

		} else if (balance > 1) {
			if (getNodeHeight(node->right->right)
					< getNodeHeight(node->right->left))
				node->right = rightrotate(node->right);

			return leftrotate(node);

		}
		return node;
	}

	Node * rightrotate(Node * node) {

		Node * main = node->left;
		Node * child = main->right;
		node->left = child;
		main->right = node;
		node->height = std::max(getNodeHeight(node->right),
				getNodeHeight(node->left)) + 1;
		main->height = std::max(getNodeHeight(main->left),
				getNodeHeight(main->right)) + 1;
		return main;

	}
	Node * leftrotate(Node * node) {
		Node * main = node->right;
		Node * child = main->left;
		node->right = child;
		main->left = node;
		node->height = std::max(getNodeHeight(node->left),
				getNodeHeight(node->right)) + 1;
		main->height = std::max(getNodeHeight(main->left),
				getNodeHeight(main->right)) + 1;
		return main;

	}
	void erase(K key) {
		root = eraseutil(root, key);
	}

	Node * plucksuccessorNode(Node * node, Node * & suc) {
		if (!node)
			return node;
		if (!node->left) {
			suc = node;
			return node->right;

		}
		node->left = plucksuccessorNode(node->left, suc);

		return balanceNode(node);

	}
	Node * eraseutil(Node * node, K key) {
		if (!node)
			return node;
		if (equaltocomparator(node->data, key)) {
			if (!node->left) {
				Node * rnode = node->right;
				delete node;
				return rnode;
			}
			if (!node->right) {
				Node * rnode = node->left;
				delete node;
				return rnode;
			}

			Node *sucNode = NULL;
			node->right = plucksuccessorNode(node->right, sucNode);
			sucNode->right = node->right;
			sucNode->left = node->left;
			node = sucNode;

		} else if (lessthancomparator(key, node->data))
			node->left = eraseutil(node->left, key);
		else
			node->right = eraseutil(node->right, key);

		return balanceNode(node);

	}
	Node* find(K key) {

		return findutil(root, key);

	}

	int getNodeHeight(Node * node) {
		if (!node)
			return 0;
		return node->height;
	}
	Node* findutil(Node * node, K keys) {

		if (!node)
			return NULL;
		if (equaltocomparator(node->data, keys))
			return node;
		if (lessthancomparator(node->data, keys))
			return findutil(keys, node->left);
		else
			return findutil(node->right, keys);

	}

	int size() {
		return cur_size;
	}
	bool isempty() {
		return cur_size == 0;
	}

	void print() {
		printutil(root);
	}
	void printutil(Node * root) {
		if (!root)
			return;
		printutil(root->left);
		std::cout << root->data << " " << root->value << " " << root->height
				<< "\n";
		printutil(root->right);
	}
};

bool lessthancmp(int a, int b) {

	return a < b;
}
bool equaltocmp(int a, int b) {

	return a == b;
}
int main() {
	AVLmap<int, int> mp;
	/*
	 * by default comparator
	 * */

	mp.insert(2, 7);
	mp.print();
	mp.erase(4);

	/*
	 *
	 * by passsing comparator*/
	AVLmap<int, int> mps = AVLmap<int, int>(lessthancmp, equaltocmp);

	mps.insert(2, 7);
	mps.insert(12, 7);
	mps.insert(1, 7);
	mps.print();
	mps.erase(4);
	mps.erase(2);
	mps.erase(12);
	mps.print();

	return 0;
}
